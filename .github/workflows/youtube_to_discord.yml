name: YouTube to Discord Notification

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  notify-discord:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install Dependencies
      run: |
        pip install --upgrade google-api-python-client requests isodate

    - name: Get latest successful run ID
      id: get_latest_run
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        result-encoding: string
        script: |
          const workflow = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'youtube_to_discord.yml',
            status: 'success'
          });
          return workflow.data.workflow_runs[0]?.id.toString() || '';

    - name: Download previous database
      if: steps.get_latest_run.outputs.result != ''
      uses: actions/download-artifact@v4
      with:
        name: youtube_database
        run-id: ${{ steps.get_latest_run.outputs.result }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create empty database if not exists
      run: |
        if [ ! -f youtube_videos.db ]; then
          echo "Creating empty database file"
          touch youtube_videos.db
        fi

    - name: Notify Discord of New YouTube Videos
      env:
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        DISCORD_YOUTUBE_WEBHOOK: ${{ secrets.DISCORD_YOUTUBE_WEBHOOK }}
        YOUTUBE_CHANNEL_ID: ${{ secrets.YOUTUBE_CHANNEL_ID }}
        LANGUAGE: ${{ secrets.LANGUAGE }}
        INIT_MAX_RESULTS: ${{ secrets.INIT_MAX_RESULTS }}
        MAX_RESULTS: ${{ secrets.MAX_RESULTS }}
        IS_FIRST_RUN: ${{ steps.get_latest_run.outputs.result == '' }}
      run: |
        python .github/scripts/youtube_to_discord.py

    - name: Upload updated database
      uses: actions/upload-artifact@v4
      with:
        name: youtube_database
        path: youtube_videos.db
        retention-days: 90

    - name: Debug Information
      if: always()
      run: |
        echo "Latest successful run ID: ${{ steps.get_latest_run.outputs.result }}"
        echo "IS_FIRST_RUN: ${{ steps.get_latest_run.outputs.result == '' }}"
        echo "Workspace contents:"
        ls -la
        echo "Database file size:"
        ls -lh youtube_videos.db || echo "Database file not found"
        echo "Database contents (if exists):"
        sqlite3 youtube_videos.db "SELECT COUNT(*) FROM videos;" || echo "Unable to query database"
