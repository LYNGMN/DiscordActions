name: YouTube to Discord Notification

on:
  schedule:
    - cron: '0 * * * *'  # 매시간 실행
  workflow_dispatch:  # 수동 실행 옵션

env:
  INITIALIZE_MODE_YOUTUBE: ${{ secrets.INITIALIZE_MODE_YOUTUBE }}

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install Dependencies
      run: |
        pip install --upgrade google-api-python-client requests isodate

    - name: Get latest successful run ID
      id: get_latest_run
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const workflow = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'youtube_to_discord.yml',
            status: 'success'
          });
          return workflow.data.workflow_runs[0]?.id.toString() || '';

    - name: Download previous database
      if: env.INITIALIZE_MODE_YOUTUBE != 'true' && steps.get_latest_run.outputs.result != ''
      uses: actions/download-artifact@v4
      with:
        name: youtube_database
        run-id: ${{ steps.get_latest_run.outputs.result }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Check if database exists or initialize
      id: check_db
      run: |
        if [ "${{ env.INITIALIZE_MODE_YOUTUBE }}" == "true" ] || [ ! -f youtube_videos.db ]; then
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Initializing or creating new database"
          rm -f youtube_videos.db
          touch youtube_videos.db
        else
          echo "exists=true" >> $GITHUB_OUTPUT
        fi

    - name: Notify Discord of New YouTube Videos
      env:
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        YOUTUBE_CHANNEL_ID: ${{ secrets.YOUTUBE_CHANNEL_ID }}
        INIT_MAX_RESULTS: ${{ secrets.YOUTUBE_INIT_MAX_RESULTS }}
        MAX_RESULTS: ${{ secrets.YOUTUBE_MAX_RESULTS }}
        IS_FIRST_RUN: ${{ steps.get_latest_run.outputs.result == '' }}
        INITIALIZE_MODE_YOUTUBE: ${{ env.INITIALIZE_MODE_YOUTUBE }}
        ADVANCED_FILTER_YOUTUBE: ${{ secrets.ADVANCED_FILTER_YOUTUBE }}
        DATE_FILTER_YOUTUBE: ${{ secrets.DATE_FILTER_YOUTUBE }}
        LANGUAGE_YOUTUBE: ${{ secrets.LANGUAGE_YOUTUBE }}
        DISCORD_WEBHOOK_YOUTUBE: ${{ secrets.DISCORD_WEBHOOK_YOUTUBE }}
        DISCORD_AVATAR_YOUTUBE: ${{ secrets.DISCORD_AVATAR_YOUTUBE }}
        DISCORD_USERNAME_YOUTUBE: ${{ secrets.DISCORD_USERNAME_YOUTUBE }}
      run: |
        python .github/scripts/youtube_to_discord.py

    - name: Upload updated database
      uses: actions/upload-artifact@v4
      with:
        name: youtube_database
        path: youtube_videos.db
        retention-days: 90

    - name: Debug Information
      if: always()
      run: |
        echo "Latest successful run ID: ${{ steps.get_latest_run.outputs.result }}"
        echo "IS_FIRST_RUN: ${{ steps.get_latest_run.outputs.result == '' }}"
        echo "INITIALIZE_MODE_YOUTUBE: ${{ env.INITIALIZE_MODE_YOUTUBE }}"
        echo "Workspace contents:"
        ls -la
        echo "Database file size:"
        ls -lh youtube_videos.db || echo "Database file not found"
        echo "Database contents (if exists):"
        sqlite3 youtube_videos.db "SELECT COUNT(*) FROM videos;" || echo "Unable to query database"
