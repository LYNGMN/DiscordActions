name: Google News (Top) RSS to Discord

on:
  schedule:
    - cron: '*/30 * * * *'  # 30분마다 실행
  workflow_dispatch:

env:
  INITIALIZE_MODE_TOP: ${{ secrets.INITIALIZE_MODE_GOOGLENEWS_TOP }}
  DISCORD_WEBHOOK_TOP: ${{ secrets.DISCORD_WEBHOOK_GOOGLENEWS_TOP }}
  DISCORD_AVATAR_TOP: ${{ secrets.DISCORD_AVATAR_GOOGLENEWS_TOP }}
  DISCORD_USERNAME_TOP: ${{ secrets.DISCORD_USERNAME_GOOGLENEWS_TOP }}
  ADVANCED_FILTER_TOP: ${{ secrets.ADVANCED_FILTER_GOOGLENEWS_TOP }}
  DATE_FILTER_TOP: ${{ secrets.DATE_FILTER_GOOGLENEWS_TOP }}
  ORIGIN_LINK_TOP: ${{ secrets.ORIGIN_LINK_GOOGLENEWS_TOP }}
  TOP_MODE: ${{ secrets.TOP_MODE }}
  TOP_COUNTRY: ${{ secrets.TOP_COUNTRY }}
  RSS_URL_TOP: ${{ secrets.RSS_URL_GOOGLENEWS_TOP }}

jobs:
  fetch-and-post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "$GITHUB_WORKSPACE/requirements.txt" ]; then
            pip install -r "$GITHUB_WORKSPACE/requirements.txt"
          else
            echo "requirements.txt not found in $GITHUB_WORKSPACE"
            ls -R "$GITHUB_WORKSPACE"
          fi

      - name: Verify Environment Variables
        run: |
          python -c "import os; required_vars = ['DISCORD_WEBHOOK_TOP', 'TOP_MODE', 'TOP_COUNTRY', 'RSS_URL_TOP']; missing = [var for var in required_vars if not os.getenv(var)]; exit(1) if missing else print('All required environment variables are set')"

      - name: Get workflow info and download previous database
        id: workflow_info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const workflows = await github.rest.actions.listRepoWorkflows({ owner, repo });
            const workflow = workflows.data.workflows.find(wf => wf.path.endsWith('googlenews-top_to_discord.yml'));
            if (!workflow) throw new Error('Workflow not found');
            const workflowId = workflow.id.toString();
            
            const runs = await github.rest.actions.listWorkflowRuns({
              owner, repo, workflow_id: workflowId, status: 'success'
            });
            const latestRunId = runs.data.workflow_runs[0]?.id.toString() || '';
            
            if (process.env.INITIALIZE_MODE_TOP !== 'true' && latestRunId) {
              try {
                await github.rest.actions.downloadArtifact({
                  owner, repo,
                  artifact_id: latestRunId,
                  archive_format: 'zip'
                });
                console.log('Previous database downloaded successfully');
              } catch (error) {
                console.log('Failed to download previous database:', error.message);
              }
            }
            
            return { workflowId, latestRunId };

      - name: Initialize or check database
        run: |
          if [ "${{ env.INITIALIZE_MODE_TOP }}" == "true" ] || [ ! -f google_news_top.db ] || [ ! -s google_news_top.db ]; then
            echo "Initializing or creating new database"
            rm -f google_news_top.db
            touch google_news_top.db
          fi

      - name: Read Google News RSS and Post to Discord
        run: python "$GITHUB_WORKSPACE/.github/scripts/googlenews-top_to_discord.py"
        working-directory: ${{ github.workspace }}

      - name: Upload updated database
        uses: actions/upload-artifact@v4
        with:
          name: googlenews_database
          path: google_news_top.db
          retention-days: 90

      - name: Debug Information
        if: always()
        run: |
          echo "Latest successful run ID: ${{ fromJson(steps.workflow_info.outputs.result).latestRunId }}"
          echo "INITIALIZE_MODE_TOP: ${{ env.INITIALIZE_MODE_TOP }}"
          echo "Workspace contents:"
          ls -la
          echo "Database file size:"
          ls -lh google_news_top.db || echo "Database file not found"
          echo "Database contents (if exists):"
          sqlite3 google_news_top.db "SELECT COUNT(*) FROM news_items;" || echo "Unable to query database"