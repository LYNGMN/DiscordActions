name: Google News (Top) RSS to Discord

on:
  schedule:
    - cron: '*/30 * * * *'  # 30분마다 실행
  workflow_dispatch:

env:
  INITIALIZE_MODE_TOP: ${{ secrets.INITIALIZE_MODE_GOOGLENEWS_TOP }}
  DISCORD_WEBHOOK_TOP: ${{ secrets.DISCORD_WEBHOOK_GOOGLENEWS_TOP }}
  DISCORD_AVATAR_TOP: ${{ secrets.DISCORD_AVATAR_GOOGLENEWS_TOP }}
  DISCORD_USERNAME_TOP: ${{ secrets.DISCORD_USERNAME_GOOGLENEWS_TOP }}
  ADVANCED_FILTER_TOP: ${{ secrets.ADVANCED_FILTER_GOOGLENEWS_TOP }}
  DATE_FILTER_TOP: ${{ secrets.DATE_FILTER_GOOGLENEWS_TOP }}
  ORIGIN_LINK_TOP: ${{ secrets.ORIGIN_LINK_GOOGLENEWS_TOP }}
  TOP_MODE: ${{ secrets.TOP_MODE }}
  TOP_COUNTRY: ${{ secrets.TOP_COUNTRY }}
  RSS_URL_TOP: ${{ secrets.RSS_URL_GOOGLENEWS_TOP }}

jobs:
  fetch-and-post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          pip install requests python-dateutil beautifulsoup4 pytz
          sudo apt-get install sqlite3

      - name: Get workflow ID
        id: get_workflow_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const workflow = workflows.data.workflows.find(wf => wf.path.endsWith('googlenews-top_to_discord.yml'));
            if (!workflow) throw new Error('Workflow not found');
            return workflow.id.toString();

      - name: Get latest successful run ID
        id: get_latest_run
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const workflowId = "${{ steps.get_workflow_id.outputs.result }}";
            const workflowRuns = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowId,
              status: 'success'
            });
            return workflowRuns.data.workflow_runs[0]?.id.toString() || '';

      - name: Download previous database
        if: env.INITIALIZE_MODE_TOP != 'true' && steps.get_latest_run.outputs.result != ''
        uses: actions/download-artifact@v4
        with:
          name: googlenews_top_database
          run-id: ${{ steps.get_latest_run.outputs.result }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check and initialize database
        run: |
          if [ "${{ env.INITIALIZE_MODE_TOP }}" == "true" ] || [ ! -f google_news_top.db ]; then
            echo "Initializing or creating new database"
            rm -f google_news_top.db
            sqlite3 google_news_top.db "CREATE TABLE IF NOT EXISTS news_items (pub_date TEXT, guid TEXT PRIMARY KEY, title TEXT, link TEXT, related_news TEXT);"
          else
            echo "Using existing database"
            sqlite3 google_news_top.db "SELECT COUNT(*) FROM news_items;"
          fi

      - name: Read Google News RSS and Post to Discord
        run: python .github/scripts/googlenews-top_to_discord.py

      - name: Upload updated database
        uses: actions/upload-artifact@v4
        with:
          name: googlenews_top_database
          path: google_news_top.db
          retention-days: 90

      - name: Debug Information
        if: always()
        run: |
          echo "Latest successful run ID: ${{ steps.get_latest_run.outputs.result }}"
          echo "INITIALIZE_MODE_TOP: ${{ env.INITIALIZE_MODE_TOP }}"
          echo "Workspace contents:"
          ls -la
          echo "Database file size:"
          ls -lh google_news_top.db || echo "Database file not found"
          echo "Database schema:"
          sqlite3 google_news_top.db ".schema"
          echo "Total number of entries in database:"
          sqlite3 google_news_top.db "SELECT COUNT(*) FROM news_items;" || echo "Unable to query database"